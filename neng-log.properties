# 设置全局日志级别
log.level=info
# 设定模块日志级别, log.level.mod.<mod-id>=<level>
log.level.mod.10=ifno
# 设定日志输出appender名称；以逗号隔开，每个日志appender名称对应一个appender，前缀log.appender.<name>的属性定义了日志appender的配置。
log.appenders=log1,log2,log3

# 制定日志appender类型，目前支持：file， syslog
log.appender.log1.type=file
# 文件日志appender的输出文件路径名, 空或"<stdout>"表示标准输出
log.appender.log1.filepath=/var/log/test-1.log
# 日志文件循环备份触发条件：max_size 大于0或者daily等于1
# 指定日志文件的最大大小，单位有：B，M，G； 0: 不限制日志文件大小，> 0: 当日志文件大于此值时，日志循环备份；
log.appender.log1.max_size=10m
# 当启用日志循环备份时，设定日志循环备份的最大备份天数， 0: 循环备份时不检查日志的备份天数，当max_days > 0时， 则max_loop配置无效；
log.appender.log1.max_days=0
# 启用日志循环备份时，设定日志循环备份的最大数量，当max_days > 0时，则max_loop无效；
log.appender.log1.max_loop=3
# 是否启用日志的每天备份
log.appender.log1.daily=true
# 日志输出头选项，是否禁用输出时间
log.appender.log1.flags.disable_time=false
# 日志输出头选项，是否输出机器名
log.appender.log1.flags.enable_hostname=true
# 日志输出头选项，是否输出程序名
log.appender.log1.flags.enable_progname=true
# 日志输出头选项，是否禁用输出进程ID
log.appender.log1.flags.disable_pid=false
# 日志输出头选项，是否禁用输出级别
log.appender.log1.flags.disable_level=false
# 日志输出头选项，是否输出线程ID
log.appender.log1.flags.enable_tid=true
# 日志输出头选项，是否输出模块ID
log.appender.log1.flags.enable_mod=true
# 日志输出头选项，是否输出标签ID
log.appender.log1.flags.enable_tag=true
# 日志输出头选项，是否输出源码文件名
log.appender.log1.flags.enable_file=true
# 日志输出头选项，是否输出源码函数名
log.appender.log1.flags.enable_func=true
# 日志输出头选项，是否输出源码文件全路径名
log.appender.log1.flags.enable_fullpath=true
# 日志输出头选项，是否启用输出制表符(tab)代替空格分隔日志文件头域
log.appender.log1.flags.enable_tab_separator=true
# 设定日志的过滤器, 只有匹配到过滤器的日志才会被投递到此appender，不设定日志过滤器，则接收所有的日志。
# filter是数组，以0或者1开始，可以设定多个； mods, tags, levels同时为空是无消息的设置
# 设置过滤器的模块ID，可以有多个，以逗号分隔；不设置或者为空，则匹配所有模块
log.appender.log1.filter[0].mods=10
# 设置过滤器的标签ID，可以有多个，以逗号分隔；不设置或者为空，则匹配所有标签
log.appender.log1.filter[0].tags=20
# 设置过滤器的日志级别，可以有多个，以逗号分隔；不设置或者为空，则匹配所有日志级别
log.appender.log1.filter[0].levels=notice
log.appender.log1.filter[1].mods=10
log.appender.log1.filter[1].tags=25
log.appender.log1.filter[1].levels=error

log.appender.log2.type=file
log.appender.log2.filepath=/var/log/test-2.log
log.appender.log2.max_size=10m
log.appender.log2.max_days=5
log.appender.log2.max_loop=3
log.appender.log2.daily=true

log.appender.log3.type=syslog
# 设置系统日志类型的appender，ident同openlog系统函数定义
log.appender.log3.ident=mytest
# 设置系统日志类型的appender，option同openlog系统函数定义
log.appender.log3.option=pid,ndelay
# 设置系统日志类型的appender，facility同openlog系统函数定义
log.appender.log3.facility=user
# 同上，设置日志过滤器
log.appender.log3.flags.enable_tid=true
log.appender.log3.flags.enable_mod=true
log.appender.log3.flags.enable_tag=true
log.appender.log3.flags.enable_file=true
log.appender.log3.flags.enable_func=true
log.appender.log3.flags.enable_fullpath=true
# log.appender.log3.filter[0].mods=10
# log.appender.log3.filter[0].tags=20
# log.appender.log3.filter[0].levels=notice
# log.appender.log3.filter[1].mods=10
# log.appender.log3.filter[1].tags=25
# log.appender.log3.filter[1].levels=error

# 设置syslog日志appender的内部过滤器，匹配facility_filter的日志，将以facility_filter[1].facility指定的facility输出到系统日志；
# 否则以appender的facility输出到系统日志
log.appender.log3.facility_filter[1].facility=mail
# 同日志过滤的定义
log.appender.log3.facility_filter[1].mods=10
# 同日志过滤的定义
log.appender.log3.facility_filter[1].tags=20
# 同日志过滤的定义
log.appender.log3.facility_filter[1].levels=notice

log.appender.log3.facility_filter[2].facility=cron
log.appender.log3.facility_filter[2].mods=10
log.appender.log3.facility_filter[2].tags=25
log.appender.log3.facility_filter[2].levels=error